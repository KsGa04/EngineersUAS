openapi: 3.0.3
info:
  description: "API для КИП"
  version: "1.0.0"
  title: "КИП API"
host: "localhost:5000"
basePath: "/"
tags:
  - name: "auth"
    description: "Авторизация и регистрация"
  - name: "protected"
    description: "Защищенные API"
  - name: "resume"
    description: "API для генерации резюме"
  - name: "skills"
    description: "API получения навыков"
  - name: "parser"
    description: "Парсер данных из соц.сетей"
  - name: "all"
    description: "Необходимые API"
  - name: "Universities"
    description: "API для работы с университетами"
schemes:
  - "http"
paths:
  /api/{table_name}:
    post:
      tags:
        - "all"
      summary: "Добавить данные в указаную таблицу"
      parameters:
        - name: "table_name"
          in: "path"
          required: true
          description: "Таблица, куда добавить данные"
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        200:
          description: "Добавлено в таблицу"
        400:
          description: "He добавлено"
    get:
      tags:
        - "all"
      summary: "Получить данные из указаной таблицы"
      parameters:
        - name: "table_name"
          in: "path"
          required: true
          description: "Таблица, откуда брать данные"
          type: "string"
        - name: "filters"
          in: "query"
          description: "Условие"
          required: false
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
          explode: true
      responses:
        200:
          description: "Получено"
        400:
          description: "He получено"
    put:
      tags:
        - "all"
      summary: "Изменить данные в указаной таблицы"
      parameters:
        - name: "table_name"
          in: "path"
          required: true
          description: "Таблица, откуда брать данные"
          type: "string"
        - name: "filters"
          in: "query"
          description: "Условие"
          required: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
          explode: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        200:
          description: "изменено"
        400:
          description: "He изменено"
  /auth/register:
    post:
      tags:
        - "auth"
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя как работодателя или студента. Если пользователь - студент, добавляются записи в таблицы `resume` и `educations`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email пользователя
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: Пароль пользователя
                  example: P@ssw0rd
                first_name:
                  type: string
                  description: Имя пользователя
                  example: John
                last_name:
                  type: string
                  description: Фамилия пользователя
                  example: Doe
                is_employer:
                  type: boolean
                  description: Чекбокс, указывающий, является ли пользователь работодателем
                  example: false
                university:
                  type: string
                  description: Название университета (только для студентов)
                  example: MIT
                group:
                  type: string
                  description: Номер группы (только для студентов)
                  example: "CS101"
              required:
                - email
                - password
                - first_name
                - last_name
                - is_employer
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Student registered successfully"
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Bad request"
        '404':
          description: Университет или группа не найдены
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "University not found"

  /auth/login:
    post:
      tags:
        - "auth"
      summary: "Авторизация пользователя"
      description: "Вход в систему"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: "Успешная авторизация"
        401:
          description: "Неверные данные"
  /pattern1/{user_id}:
    get:
      tags:
        - "resume"
      summary: "Получить резюме пользователя"
      description: "Возвращает резюме пользователя по его ID"
      parameters:
        - name: user_id
          in: path
          required: true
          description: "Идентификатор пользователя"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Успешное получение резюме"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeResponse'
        '404':
          description: "Пользователь или резюме не найдены"
        '500':
          description: "Ошибка на стороне сервера"
  /get/skills:
    get:
      tags:
        - "skills"
      summary: "Получает все навыки"
      description: "Возвращает список всех навыков в бд"
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_skill:
                      type: integer
                      description: The ID of the skill.
                      example: 1
                    skill_name:
                      type: string
                      description: The name of the skill.
                      example: Python
        '500':
          description: Server error
  /api/student/{student_id}/skills:
    get:
      tags:
        - "skills"
      summary: "Получить все навыки по резюме пользователя"
      description: "Возвращается список навыков конкретного пользователя"
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the student
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_id:
                    type: integer
                    example: 1
                  skills:
                    type: array
                    items:
                      type: string
                      example: Python
        '404':
          description: Student or resume not found
  /project/{id_project}/skills:
    get:
      tags:
        - "skills"
      summary: "Получить навыки по проекту"
      description: "Возвращает список навыков, связанных с указанным проектом."
      parameters:
        - name: "id_project"
          in: "path"
          description: "ID проекта"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Skill"
        400:
          description: "Ошибка запроса"
    /task/{id_task}/skills:
      get:
        tags:
          - "skills"
        summary: "Получить навыки по задаче"
        description: "Возвращает список навыков, связанных с указанной задачей."
        parameters:
          - name: "id_task"
            in: "path"
            description: "ID задачи"
            required: true
            type: "integer"
            format: "int64"
        responses:
          200:
            description: "Успешный запрос"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Skill"
          400:
            description: "Ошибка запроса"
  /api/github/repos:
    get:
      tags:
        - "parser"
      summary: Получить информацию о репозиториях с генерацией описания
      parameters:
        - name: github_url
          in: query
          description: Ссылка на профиль GitHub
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: Необязательный GitHub Access Token
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Название репозитория
                    description:
                      type: string
                      description: Описание репозитория
                    languages:
                      type: array
                      description: Языки, использованные в репозитории
                      items:
                        type: string
                    topics:
                      type: array
                      description: Темы, связанные с репозиторием
                      items:
                        type: string
                    generated_description:
                      type: string
                      description: Сгенерированное описание репозитория
        '400':
          description: Неверный запрос
        '500':
          description: Ошибка сервера

  /api/github/add_repos:
    get:
      tags:
        - "parser"
      summary: "Получение репозиториев и добавление проектов в базу данных"
      description: "Возвращает список репозиториев с GitHub и добавляет проекты в базу данных."
      parameters:
        - name: "github_url"
          in: "query"
          description: "URL профиля GitHub пользователя"
          required: true
          type: "string"
        - name: "resume_id"
          in: "query"
          description: "ID резюме, к которому будут привязаны проекты"
          required: true
          type: "integer"
        - name: "token"
          in: "query"
          description: "GitHub Access Token (необязательный)"
          required: false
          type: "string"
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepositoryInfo"
        400:
          description: "Ошибка запроса"
        500:
          description: "Ошибка на сервере"
  /get/universities:
    get:
      tags:
        - "Universities"
      summary: "Получить список всех университетов"
      description: "Возвращает список всех университетов"
      produces:
        - "application/json"
      responses:
        200:
          description: "Успешный ответ. Список университетов."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id_university:
                  type: "integer"
                short_name:
                  type: "string"
                full_name:
                  type: "string"
                location:
                  type: "string"
                website:
                  type: "string"
                contact_info:
                  type: "string"
        404:
          description: "Университеты не найдены"

  /get/university/{id_university}/directions:
    get:
      tags:
        - "Universities"
      summary: "Получить направления для конкретного университета"
      description: "Возвращает список направлений для университета по его ID"
      produces:
        - "application/json"
      parameters:
        - name: "id_university"
          in: "path"
          required: true
          type: "integer"
          description: "ID университета"
      responses:
        200:
          description: "Успешный ответ. Список направлений."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id_direction:
                  type: "integer"
                direction_code:
                  type: "string"
                direction_name:
                  type: "string"
        404:
          description: "Направления не найдены для этого университета"

  /get/university/{id_university}/groups:
    get:
      tags:
        - "Universities"
      summary: "Получить список групп для конкретного университета"
      description: "Возвращает список групп для университета по его ID"
      produces:
        - "application/json"
      parameters:
        - name: "id_university"
          in: "path"
          required: true
          type: "integer"
          description: "ID университета"
      responses:
        200:
          description: "Успешный ответ. Список групп."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id_group:
                  type: "integer"
                group_name:
                  type: "string"
                start_year:
                  type: "integer"
                id_direction:
                  type: "integer"
        404:
          description: "Группы не найдены для этого университета"

  /api/gitlab/repos:
    get:
      tags:
        - "parser"
      summary: Получить информацию о репозиториях с генерацией описания
      parameters:
        - name: gitlab_url
          in: query
          description: Ссылка на профиль GitLab
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: GitLab Token
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Название репозитория
                    description:
                      type: string
                      description: Описание репозитория
                    languages:
                      type: array
                      description: Языки, использованные в репозитории
                      items:
                        type: string
                    topics:
                      type: array
                      description: Темы, связанные с репозиторием
                      items:
                        type: string
                    generated_description:
                      type: string
                      description: Сгенерированное описание репозитория
        '400':
          description: Неверный запрос
        '500':
          description: Ошибка сервера


components:
  schemas:
    # Описание таблицы users
    User:
      type: object
      properties:
        id_user:
          type: integer
          description: 'Primary key'
        first_name:
          type: string
          description: 'First name of the user'
        last_name:
          type: string
          description: 'Last name of the user'
        middle_name:
          type: string
          description: 'Middle name of the user (optional)'
        email:
          type: string
          description: 'Email address'
        phone:
          type: string
          description: 'Phone number'
        password:
          type: string
          description: 'Password (hashed)'
        birth_date:
          type: string
          format: date
          description: 'Birth date of the user'
        role_id:
          type: integer
          description: 'Foreign key referencing roles'
        created_at:
          type: string
          format: date-time
          description: 'Timestamp when the user was created'
        last_login:
          type: string
          format: date-time
          description: 'Timestamp of the last login'
        profile_photo:
          type: string
          description: 'Profile photo (binary data)'
        address:
          type: string
          description: 'User address'

    # Описание таблицы roles
    Role:
      type: object
      properties:
        id_role:
          type: integer
          description: 'Primary key for role'
        role_name:
          type: string
          description: 'Role name'

    # Описание таблицы resume
    Resume:
      type: object
      properties:
        id_resume:
          type: integer
          description: 'Primary key for resume'
        id_user:
          type: integer
          description: 'Foreign key referencing users'
        about_me:
          type: string
          description: 'Description about the user'

    # Описание таблицы university
    University:
      type: object
      properties:
        id_university:
          type: integer
          description: 'Primary key for university'
        short_name:
          type: string
          description: 'Short name of the university'
        full_name:
          type: string
          description: 'Full name of the university'
        location:
          type: string
          description: 'Location of the university'
        website:
          type: string
          description: 'Website of the university'
        contact_info:
          type: string
          description: 'Contact information'

    # Описание таблицы degree
    Degree:
      type: object
      properties:
        id_degree:
          type: integer
          description: 'Primary key for degree'
        degree_name:
          type: string
          description: 'Name of the degree'

    # Описание промежуточной таблицы university_degree
    UniversityDegree:
      type: object
      properties:
        id:
          type: integer
          description: 'Primary key for university_degree'
        id_university:
          type: integer
          description: 'Foreign key referencing university'
        id_degree:
          type: integer
          description: 'Foreign key referencing degree'

    # Описание таблицы direction
    Direction:
      type: object
      properties:
        id_direction:
          type: integer
          description: 'Primary key for direction'
        direction_code:
          type: string
          description: 'Code of the direction'
        direction_name:
          type: string
          description: 'Name of the direction'

    # Описание промежуточной таблицы university_direction
    UniversityDirection:
      type: object
      properties:
        id_university_direction:
          type: integer
          description: 'Primary key for university_direction'
        id_university:
          type: integer
          description: 'Foreign key referencing university'
        id_direction:
          type: integer
          description: 'Foreign key referencing direction'

    # Описание таблицы groups_number
    Group:
      type: object
      properties:
        id_group:
          type: integer
          description: 'Primary key for groups'
        group_name:
          type: string
          description: 'Name of the group'
        start_year:
          type: integer
          description: 'Start year of the group'
        id_university:
          type: integer
          description: 'Foreign key referencing university'
        id_education:
          type: integer
          description: 'Foreign key referencing education'
        id_direction:
          type: integer
          description: 'Foreign key referencing direction'

    # Описание таблицы tasks
    Task:
      type: object
      properties:
        id_task:
          type: integer
          description: 'Primary key for task'
        task_name:
          type: string
          description: 'Name of the task'
        task_type:
          type: string
          description: 'Type of the task'
        id_group:
          type: integer
          description: 'Foreign key referencing groups_number'
        task_description:
          type: string
          description: 'Description of the task'

    # Описание таблицы organization
    Organization:
      type: object
      properties:
        id_organization:
          type: integer
          description: 'Primary key for organization'
        organization_name:
          type: string
          description: 'Name of the organization'
        location:
          type: string
          description: 'Location of the organization'
        website:
          type: string
          description: 'Website of the organization'

    # Описание таблицы work
    Work:
      type: object
      properties:
        id_work:
          type: integer
          description: 'Primary key for work'
        id_resume:
          type: integer
          description: 'Foreign key referencing resume'
        position:
          type: string
          description: 'Position at work'
        start_date:
          type: string
          format: date
          description: 'Start date of the work'
        end_date:
          type: string
          format: date
          description: 'End date of the work'
      # Описание таблицы educations
    Education:
      type: object
      properties:
        id_education:
          type: integer
          description: 'Primary key for education'
        id_resume:
          type: integer
          description: 'Foreign key referencing resume'
        id_university:
          type: integer
          description: 'Foreign key referencing university'
        id_degree:
          type: integer
          description: 'Foreign key referencing degree'
        id_direction:
          type: integer
          description: 'Foreign key referencing direction'
        group_number:
          type: integer
          description: 'Foreign key referencing group'
        start_date:
          type: string
          format: date
          description: 'Start date of education'
        end_date:
          type: string
          format: date
          description: 'End date of education'
        status:
          type: string
          description: 'Status of education (e.g., completed, in-progress)'
    # Описание таблицы work_organization
    WorkOrganization:
      type: object
      properties:
        id:
          type: integer
          description: 'Primary key for work-organization relationship'
        id_work:
          type: integer
          description: 'Foreign key referencing work'
        id_organization:
          type: integer
          description: 'Foreign key referencing organization'

    # Описание таблицы responsibilities
    Responsibility:
      type: object
      properties:
        id_responsibility:
          type: integer
          description: 'Primary key for responsibility'
        id_work:
          type: integer
          description: 'Foreign key referencing work'
        responsibility:
          type: string
          description: 'Description of the responsibility'

    # Описание таблицы projects
    Project:
      type: object
      properties:
        id_project:
          type: integer
          description: 'Primary key for project'
        id_resume:
          type: integer
          description: 'Foreign key referencing resume'
        project_name:
          type: string
          description: 'Name of the project'
        project_description:
          type: string
          description: 'Description of the project'
        project_link:
          type: string
          description: 'Link to the project'

    # Описание таблицы skills
    Skill:
      type: object
      properties:
        id_skill:
          type: integer
          description: 'Primary key for skill'
        skill_name:
          type: string
          description: 'Name of the skill'

    # Описание промежуточной таблицы resume_skills
    ResumeSkill:
      type: object
      properties:
        id_resume_skills:
          type: integer
          description: 'Primary key for resume-skill relationship'
        id_resume:
          type: integer
          description: 'Foreign key referencing resume'
        id_skill:
          type: integer
          description: 'Foreign key referencing skill'

    # Описание промежуточной таблицы task_skills
    TaskSkill:
      type: object
      properties:
        id:
          type: integer
          description: 'Primary key for task-skill relationship'
        id_task:
          type: integer
          description: 'Foreign key referencing task'
        id_skill:
          type: integer
          description: 'Foreign key referencing skill'

    # Описание промежуточной таблицы responsibility_skills
    ResponsibilitySkill:
      type: object
      properties:
        id:
          type: integer
          description: 'Primary key for responsibility-skill relationship'
        id_responsibility:
          type: integer
          description: 'Foreign key referencing responsibility'
        id_skill:
          type: integer
          description: 'Foreign key referencing skill'

    # Описание промежуточной таблицы project_skills
    ProjectSkill:
      type: object
      properties:
        id:
          type: integer
          description: 'Primary key for project-skill relationship'
        id_project:
          type: integer
          description: 'Foreign key referencing project'
        id_skill:
          type: integer
          description: 'Foreign key referencing skill'

    # Описание таблицы social_network_types
    SocialNetworkType:
      type: object
      properties:
        id_social_network_type:
          type: integer
          description: 'Primary key for social network type'
        network_name:
          type: string
          description: 'Name of the social network (e.g., LinkedIn, GitHub)'

    # Описание таблицы user_social_networks
    UserSocialNetwork:
      type: object
      properties:
        id_user_social_network:
          type: integer
          description: 'Primary key for user-social network relationship'
        id_resume:
          type: integer
          description: 'Foreign key referencing resume'
        id_social_network_type:
          type: integer
          description: 'Foreign key referencing social network type'
        network_link:
          type: string
          description: 'Link to the user’s social network profile'
