swagger: '2.0'
info:
  description: "API для КИП"
  version: "1.0.0"
  title: "КИП API"
host: "localhost:5000"
basePath: "/"
tags:
  - name: "auth"
    description: "Авторизация и регистрация"
  - name: "protected"
    description: "Защищенные API"
  - name: "resume"
    description: "API для генерации резюме"
  - name: "skills"
    description: "API получения навыков"
  - name: "parser"
    description: "Парсер данных из соц.сетей"
  - name: "all"
    description: "Необходимые API"
  - name: "Universities"
    description: "API для работы с университетами"
schemes:
  - "http"
paths:
  /api/{table_name}:
    post:
      tags:
        - "all"
      summary: "Добавить данные в указаную таблицу"
      parameters:
        - name: "table_name"
          in: "path"
          required: true
          description: "Таблица, куда добавить данные"
          type: "string"
        - in: "body"
          name: "body"
          description: "Данные"
          required: true
          schema:
            type: "object"
      responses:
        200:
          description: "Добавлено в таблицу"
        400:
          description: "He добавлено"

  /api/auth/register:
    post:
      tags:
        - "auth"
      summary: "Регистрация пользователя"
      description: "Создание новой учетной записи"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "email"
          type: "string"
          required: true
          description: "Email пользователя"
        - in: "formData"
          name: "password"
          type: "string"
          required: true
          description: "Пароль пользователя"
        - in: "formData"
          name: "role"
          type: "string"
          required: true
          description: "Роль пользователя (student, employer, admin)"
          enum:
            - "student"
            - "employer"
            - "admin"
        - in: "formData"
          name: "first_name"
          type: "string"
          required: true
          description: "Имя пользователя"
        - in: "formData"
          name: "last_name"
          type: "string"
          required: true
          description: "Фамилия пользователя"
        - in: "formData"
          name: "phone"
          type: "string"
          required: false
          description: "Телефон пользователя"
        - in: "formData"
          name: "telegram_username"
          type: "string"
          required: false
          description: "Имя пользователя в Telegram"
        - in: "formData"
          name: "city"
          type: "string"
          required: false
          description: "Город проживания пользователя"
        - in: "formData"
          name: "image"
          type: "file"
          required: false
          description: "Изображение профиля пользователя (опционально)"
      responses:
        201:
          description: "Пользователь успешно зарегистрирован"
        400:
          description: "Пользователь уже существует"

  /api/auth/login:
    post:
      tags:
        - "auth"
      summary: "Авторизация пользователя"
      description: "Вход в систему"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Данные для входа"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Успешная авторизация"
        401:
          description: "Неверные данные"

  /api/auth/protected:
    get:
      tags:
        - "protected"
      summary: "Защищенный маршрут"
      description: "Доступен только авторизованным пользователям"
      produces:
        - "application/json"
      responses:
        200:
          description: "Успешный доступ"
  /pattern1/{user_id}:
    get:
      tags:
        - "resume"
      summary: "Получить резюме пользователя"
      description: "Возвращает резюме пользователя по его ID"
      parameters:
        - name: user_id
          in: path
          required: true
          description: "Идентификатор пользователя"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Успешное получение резюме"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeResponse'
        '404':
          description: "Пользователь или резюме не найдены"
        '500':
          description: "Ошибка на стороне сервера"
  /get/skills:
    get:
      tags:
        - "skills"
      summary: "Получает все навыки"
      description: "Возвращает список всех навыков в бд"
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_skill:
                      type: integer
                      description: The ID of the skill.
                      example: 1
                    skill_name:
                      type: string
                      description: The name of the skill.
                      example: Python
        '500':
          description: Server error
  /api/student/{student_id}/skills:
    get:
      tags:
        - "skills"
      summary: "Получить все навыки по резюме пользователя"
      description: "Возвращается список навыков конкретного пользователя"
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the student
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_id:
                    type: integer
                    example: 1
                  skills:
                    type: array
                    items:
                      type: string
                      example: Python
        '404':
          description: Student or resume not found
  /project/{id_project}/skills:
    get:
      tags:
        - "skills"
      summary: "Получить навыки по проекту"
      description: "Возвращает список навыков, связанных с указанным проектом."
      parameters:
        - name: "id_project"
          in: "path"
          description: "ID проекта"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Skill"
        400:
          description: "Ошибка запроса"
    /task/{id_task}/skills:
      get:
        tags:
          - "skills"
        summary: "Получить навыки по задаче"
        description: "Возвращает список навыков, связанных с указанной задачей."
        parameters:
          - name: "id_task"
            in: "path"
            description: "ID задачи"
            required: true
            type: "integer"
            format: "int64"
        responses:
          200:
            description: "Успешный запрос"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Skill"
          400:
            description: "Ошибка запроса"
  /api/github/repos:
    get:
      tags:
        - "parser"
      summary: Получить информацию о репозиториях с генерацией описания
      parameters:
        - name: github_url
          in: query
          description: Ссылка на профиль GitHub
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: Необязательный GitHub Access Token
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Название репозитория
                    description:
                      type: string
                      description: Описание репозитория
                    languages:
                      type: array
                      description: Языки, использованные в репозитории
                      items:
                        type: string
                    topics:
                      type: array
                      description: Темы, связанные с репозиторием
                      items:
                        type: string
                    generated_description:
                      type: string
                      description: Сгенерированное описание репозитория
        '400':
          description: Неверный запрос
        '500':
          description: Ошибка сервера
  /api/github/add_repos:
    get:
      tags:
        - "parser"
      summary: "Получение репозиториев и добавление проектов в базу данных"
      description: "Возвращает список репозиториев с GitHub и добавляет проекты в базу данных."
      parameters:
        - name: "github_url"
          in: "query"
          description: "URL профиля GitHub пользователя"
          required: true
          type: "string"
        - name: "resume_id"
          in: "query"
          description: "ID резюме, к которому будут привязаны проекты"
          required: true
          type: "integer"
        - name: "token"
          in: "query"
          description: "GitHub Access Token (необязательный)"
          required: false
          type: "string"
      responses:
        200:
          description: "Успешный запрос"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepositoryInfo"
        400:
          description: "Ошибка запроса"
        500:
          description: "Ошибка на сервере"
  /get/universities:
    get:
      tags:
        - "Universities"
      summary: "Получить список всех университетов"
      description: "Возвращает список всех университетов"
      produces:
        - "application/json"
      responses:
        200:
          description: "Успешный ответ. Список университетов."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id_university:
                  type: "integer"
                short_name:
                  type: "string"
                full_name:
                  type: "string"
                location:
                  type: "string"
                website:
                  type: "string"
                contact_info:
                  type: "string"
        404:
          description: "Университеты не найдены"

  /get/university/{id_university}/directions:
    get:
      tags:
        - "Universities"
      summary: "Получить направления для конкретного университета"
      description: "Возвращает список направлений для университета по его ID"
      produces:
        - "application/json"
      parameters:
        - name: "id_university"
          in: "path"
          required: true
          type: "integer"
          description: "ID университета"
      responses:
        200:
          description: "Успешный ответ. Список направлений."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id_direction:
                  type: "integer"
                direction_code:
                  type: "string"
                direction_name:
                  type: "string"
        404:
          description: "Направления не найдены для этого университета"

  /get/university/{id_university}/groups:
    get:
      tags:
        - "Universities"
      summary: "Получить список групп для конкретного университета"
      description: "Возвращает список групп для университета по его ID"
      produces:
        - "application/json"
      parameters:
        - name: "id_university"
          in: "path"
          required: true
          type: "integer"
          description: "ID университета"
      responses:
        200:
          description: "Успешный ответ. Список групп."
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id_group:
                  type: "integer"
                group_name:
                  type: "string"
                start_year:
                  type: "integer"
                id_direction:
                  type: "integer"
        404:
          description: "Группы не найдены для этого университета"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: "ID пользователя"
        name:
          type: string
          description: "Имя пользователя"
        email:
          type: string
          description: "Email пользователя"
        birth_date:
          type: string
          format: date
          description: "Дата рождения пользователя"

    ResumeResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        education_list:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        experience_list:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        age:
          type: string
          description: "Возраст пользователя"

    Education:
      type: object
      properties:
        degree_name:
          type: string
          description: "Название степени"
        university_name:
          type: string
          description: "Название университета"
        start_date:
          type: string
          format: date
          description: "Дата начала обучения"
        end_date:
          type: string
          format: date
          description: "Дата окончания обучения"

    Experience:
      type: object
      properties:
        position:
          type: string
          description: "Должность"
        organization_name:
          type: string
          description: "Название компании"
        start_date:
          type: string
          format: date
          description: "Дата начала работы"
        end_date:
          type: string
          format: date
          description: "Дата окончания работы"
        responsibilities:
          type: array
          items:
            type: string
            description: "Обязанности на данной должности"

    Skill:
      type: object
      properties:
        skill_name:
          type: string
          description: "Название навыка"

    Project:
      type: object
      properties:
        project_name:
          type: string
          description: "Название проекта"
        project_description:
          type: string
          description: "Описание проекта"
        project_link:
          type: string
          description: "Ссылка на проект"
        project_skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
